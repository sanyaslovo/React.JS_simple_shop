{"version":3,"sources":["redux/cart/cart.types.js","Routes.jsx","redux/cart/cart.reducer.js","redux/root.reducer.js","redux/store.js","App.jsx","index.jsx"],"names":["cartActionTypes","ADD_ITEM_TO_CART","REMOVE_ITEM_FROM_CART","ENCREASE_CART_ITEM","DESCREASE_CART_ITEM","routesConfig","exact","path","component","lazy","__webpack_require__","e","then","bind","Promise","all","renderRoutes","routes","react_default","a","createElement","react","fallback","react_loader_default","loaded","lines","length","width","radius","corners","rotate","direction","color","speed","trail","shadow","hwaccel","className","zIndex","top","left","scale","loadedClassName","react_router","map","route","i","Guard","guard","Fragment","Layout","layout","Component","key","render","props","Routes","INITIAL_STATE","cartItems","cartReducer","state","arguments","undefined","action","type","find","cartItem","id","payload","Object","objectSpread","quantity","toConsumableArray","concat","newCartItems","filter","product","encreaseItem","descreaseItem","persistConfig","storage","whitelist","rootReducer","combineReducers","cart","persistReducer","store","createStore","persistor","persistStore","history","createBrowserHistory","App","es","integration_react","src_Routes","ReactDOM","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.48f69350.chunk.js","sourcesContent":["const cartActionTypes = {\n    ADD_ITEM_TO_CART: \"ADD_ITEM_TO_CART\",\n    REMOVE_ITEM_FROM_CART: \"REMOVE_ITEM_FROM_CART\",\n    ENCREASE_CART_ITEM: \"ENCREASE_CART_ITEM\",\n    DESCREASE_CART_ITEM: \"DESCREASE_CART_ITEM\"\n};\n\nexport default cartActionTypes;\n","import React, {\n    lazy,\n    Suspense,\n    Fragment\n} from 'react';\nimport { Switch, Route } from 'react-router-dom';\nimport Loader from \"react-loader\";\n\nconst routesConfig = [\n    {\n        exact: true,\n        path: '/react-ecommerce-homepage',\n        component: lazy(() => import('./pages/home-page/HomePage'))\n    },\n    {\n        exact: true,\n        path: '/react-ecommerce-homepage/shop',\n        component: lazy(() => import('./pages/shop-page/ShopPage'))\n    },\n    {\n        exact: true,\n        path: '/react-ecommerce-homepage/contact',\n        component: lazy(() => import('./pages/contact-page/ContactPage'))\n    },\n    {\n        exact: true,\n        path: '/react-ecommerce-homepage/sign-in',\n        component: lazy(() => import('./pages/sign-in-page/SignInPage'))\n    },\n    {\n        exact: true,\n        path: '/react-ecommerce-homepage/checkout',\n        component: lazy(() => import('./pages/checkout-page/CheckoutPage'))\n    },\n    {\n        exact: true,\n        path: '/react-ecommerce-homepage/shop/:category',\n        component: lazy(() => import('../src/pages/category-page/CategoryPage'))\n    },\n    {\n        exact: true,\n        path: '*',\n        component: lazy(() => import('./pages/not-found-page/NotFoundPage'))\n    }\n]\n\n\nconst renderRoutes = (routes) => (routes ? (\n    <Suspense fallback={\n        <Loader\n            loaded={true}\n            lines={13}\n            length={20}\n            width={10}\n            radius={30}\n            corners={1}\n            rotate={0}\n            direction={1}\n            color=\"#000\"\n            speed={1}\n            trail={60}\n            shadow={false}\n            hwaccel={false}\n            className=\"spinner\"\n            zIndex={2e9}\n            top=\"50%\"\n            left=\"50%\"\n            scale={1.0}\n            loadedClassName=\"loadedContent\"\n        />\n    }>\n        <Switch>\n            {routes.map((route, i) => {\n                const Guard = route.guard || Fragment;\n                const Layout = route.layout || Fragment;\n                const Component = route.component;\n\n                return (\n                    <Route\n                        key={i}\n                        path={route.path}\n                        exact={route.exact}\n                        render={(props) => (\n                            <Guard>\n                                <Layout>\n                                    {route.routes\n                                        ? renderRoutes(route.routes)\n                                        : <Component {...props} />}\n                                </Layout>\n                            </Guard>\n                        )}\n                    />\n                );\n            })}\n        </Switch>\n    </Suspense>\n) : null);\n\n\n\nfunction Routes() {\n    return renderRoutes(routesConfig);\n}\n\nexport default Routes;\n","import cartActionTypes from \"./cart.types\";\n\nconst INITIAL_STATE = {\n    cartItems: []\n};\n\nconst cartReducer = (state = INITIAL_STATE, action) => {\n    switch (action.type) {\n        case cartActionTypes.ADD_ITEM_TO_CART:\n            const existingCartItem = state.cartItems.find(\n                cartItem => cartItem.id === action.payload.id\n            );\n            if (existingCartItem){\n                const cartItems = state.cartItems.map(cartItem =>\n                      cartItem.id === action.payload.id\n                          ? { ...cartItem, quantity: cartItem.quantity + 1 }\n                          : cartItem\n                )\n                return {\n                    ...state,\n                    cartItems: [ ...cartItems ]\n                }\n            }\n            return {\n                ...state,\n                cartItems: [...state.cartItems, action.payload]\n            }\n        case cartActionTypes.REMOVE_ITEM_FROM_CART:\n            const newCartItems = state.cartItems.filter(product => product.id !== action.payload)\n            return {\n                ...state,\n                cartItems: [...newCartItems]\n            }\n        case cartActionTypes.ENCREASE_CART_ITEM:\n            const encreaseItem = state.cartItems.map(product => {\n                if (product.id === action.payload) {\n                    product.quantity += 1\n                    return product\n                }\n                return product\n            })\n            return {\n                ...state,\n                cartItems: [...encreaseItem]\n            }\n        case cartActionTypes.DESCREASE_CART_ITEM:\n            const descreaseItem = state.cartItems.map(product => {\n                if (product.id === action.payload && product.quantity>0) {\n                    product.quantity -= 1\n                    return product\n                }\n                return product\n            })\n            return {\n                ...state,\n                cartItems: [...descreaseItem]\n            }\n\n        default:\n            return state;\n    }\n};\n\nexport default cartReducer;\n","import { combineReducers } from \"redux\";\nimport storage from \"redux-persist/lib/storage\"\nimport cartReducer from \"./cart/cart.reducer\";\nimport { persistReducer } from \"redux-persist\"\n\nconst persistConfig = {\n    key: 'root',            // where in our reducer do  we want to store\n    storage,\n\n    whitelist: [\"cart\"]  // a list that specifies which state props we want to persist\n\n}\n\nconst rootReducer = combineReducers({\n    cart: cartReducer\n});\nexport default persistReducer(persistConfig, rootReducer)","import { createStore } from \"redux\";\nimport { persistStore } from 'redux-persist';\nimport rootReducer from \"./root.reducer\";\n\n\nexport const store = createStore(rootReducer);\nexport const persistor = persistStore(store);\nexport default { store, persistor }","import React from \"react\";\nimport { Router } from 'react-router-dom';\nimport { createBrowserHistory } from 'history';\nimport Routes from '../src/Routes';\nimport { Provider } from \"react-redux\";\nimport { PersistGate } from 'redux-persist/integration/react';\nimport { store, persistor } from './redux/store';\n\n\nimport './App.css';\n\nconst history = createBrowserHistory();\n\nconst App = () => {\n  return (\n      <Provider store={store}>\n          <Router history={history}>\n              <PersistGate persistor={persistor}>\n                <Routes />\n              </PersistGate>\n          </Router>\n      </Provider>\n  )\n};\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}